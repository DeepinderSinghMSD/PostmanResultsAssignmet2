{
	"info": {
		"_postman_id": "b094e4ef-e38f-4d09-b58e-5ee437974caa",
		"name": "Assignment2Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36731963"
	},
	"item": [
		{
			"name": "Product",
			"item": [
				{
					"name": "Creating new product - success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should have a product object\", function () {\r",
									"    pm.response.to.have.jsonBody(\"description\", \"shoes in sneakers - Great.\");\r",
									"    pm.response.to.have.jsonBody(\"image\", \"https://www.bing.com/ck/a?!&&p=e91ec6c697b80a1fJmltdHM9MTcyMDIyNDAwMCZpZ3VpZD0wM2IwNDZhOC05MThiLTZiOWQtMTJmNS01MmE4OTA4YTZhYWYmaW5zaWQ9NTY3OA&ptn=3&ver=2&hsh=3&fclid=03b046a8-918b-6b9d-12f5-52a8908a6aaf&u=a1L2ltYWdlcy9zZWFyY2g_cT1zaG9lcyUyMGltYWdlcyZGT1JNPUlRRlJCQSZpZD0yMDMzOUEwNDBFNjFDNDkyNkJBQUFGOEZFQTA2OEZDMkZFMzQyNDA3&ntb=1\");\r",
									"    pm.response.to.have.jsonBody(\"pricing\", 10);\r",
									"    pm.response.to.have.jsonBody(\"shippingCost\", 2);\r",
									"    pm.response.to.have.jsonBody(\"rating\", 5.0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"shoes in sneakers - Great.\",\r\n    \"image\": \"https://www.bing.com/ck/a?!&&p=e91ec6c697b80a1fJmltdHM9MTcyMDIyNDAwMCZpZ3VpZD0wM2IwNDZhOC05MThiLTZiOWQtMTJmNS01MmE4OTA4YTZhYWYmaW5zaWQ9NTY3OA&ptn=3&ver=2&hsh=3&fclid=03b046a8-918b-6b9d-12f5-52a8908a6aaf&u=a1L2ltYWdlcy9zZWFyY2g_cT1zaG9lcyUyMGltYWdlcyZGT1JNPUlRRlJCQSZpZD0yMDMzOUEwNDBFNjFDNDkyNkJBQUFGOEZFQTA2OEZDMkZFMzQyNDA3&ntb=1\",\r\n    \"pricing\": 10,\r\n    \"shippingCost\": 2,\r\n    \"rating\": 5.0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating new product - failure case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must contain validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"    pm.response.json().hasOwnProperty(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"so\", //description is too short \r\n    \"image\": \"https://www.bing.com/images/search?view=detailV2&ccid=xsUyZhwc&id=0EE16CBE2536927333CE88A2A63139A2EFF488CF&thid=OIP.xsUyZhwcu5dNxZqpPfCiFwHaIf&mediaurl=https%3a%2f%2fpurepng.com%2fpublic%2fuploads%2flarge%2fpurepng.com-t-shirtt-shirtfabrict-shapegramnets-1421526429337ircsl.png&cdnurl=https%3a%2f%2fth.bing.com%2fth%2fid%2fR.c6c532661c1cbb974dc59aa93df0a217%3frik%3dz4j076I5MaaiiA%26pid%3dImgRaw%26r%3d0&exph=1024&expw=893&q=t+shirts+images&simid=608010002322371752&FORM=IRPRST&ck=0F5ED5F8BC35A855C7F288B673E0C42E&selectedIndex=18&itb=1\",\r\n    \"pricing\": 50,\r\n    \"shippingCost\": 5,\r\n    \"rating\": 4\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "For getting a single product - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response need to have correct product ID\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"_id\").that.is.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/6688a42d81b791087a41a198",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"6688a42d81b791087a41a198"
							]
						}
					},
					"response": []
				},
				{
					"name": "For getting all the products - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody('data', pm.expect.toBeArray());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating a product - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response need to  have updated product details\", function () {\r",
									"    pm.response.to.have.jsonBody(\"description\", \"We have round neck and polo T-shirts. Now, we have added new variety of long sleeves T-shirts\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"We have round neck and polo T-shirts. Now, we have added new variety of long sleeves T-shirts\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/6688a42d81b791087a41a198",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"6688a42d81b791087a41a198"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a product - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should indicate deletion\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Product has been deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/6689c2c3ec809403425d8f23",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"6689c2c3ec809403425d8f23"
							]
						}
					},
					"response": []
				},
				{
					"name": "For getting a single product - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Product has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"Product has not been found\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/66887df6984b48f78fc2fa0e",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"66887df6984b48f78fc2fa0e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating a product - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"    pm.response.json().hasOwnProperty(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pricing\": \"invalid price\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/66887df6952b48f78fc2fa0e",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"66887df6952b48f78fc2fa0e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a product - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Product has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"Product has not been found\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/66887e6f952b48f78fc2fa11",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"66887e6f952b48f78fc2fa11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Creating User - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created user\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"email\", \"piyush16@gmail.com\");\r",
									"    pm.response.to.have.jsonBody(\"username\", \"piyush\");\r",
									"    pm.response.to.have.jsonBody(\"shippingAddress\", \"cambridge\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"piyush16@gmail.com\",\r\n    \"password\": \"thatisid\",\r\n    \"username\": \"piyush\",\r\n    \"shippingAddress\": \"cambridge\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a user - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'User has been deleted'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"User has been deleted\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/6689c2f2ec809403425d8f25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"6689c2f2ec809403425d8f25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting all the users - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array of users\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting a single user - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the correct user\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"email\", \"js@gmail.com\"); \r",
									"    pm.response.to.have.jsonBody(\"username\", \"jts\");\r",
									"    pm.response.to.have.jsonBody(\"shippingAddress\",\"waterloo\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/6688989481b791087a41a171",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"6688989481b791087a41a171"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating a user - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated user\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"shippingAddress\", \"brampton\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"shippingAddress\": \"brampton\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/6689ba61ec809403425d8eac",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"6689ba61ec809403425d8eac"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a user - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"    pm.response.json().hasOwnProperty(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"invalidemail\",\r\n    \"password\": \"pass\",\r\n    \"username\": \"u\",\r\n    \"shippingAddress\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting a user - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'User has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"User has not been found\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/6688089481b791087a41a171",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"6688089481b791087a41a171"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating a user - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"    pm.response.json().hasOwnProperty(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"notyo\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/66889e5e81b791087a41a181",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"66889e5e81b791087a41a181"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a user - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'User has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"User has not been found\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/66788a03381b791087a41a195",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"66788a03381b791087a41a195"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Creating a new cart - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created cart\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"user\");\r",
									"    pm.response.to.have.jsonBody(\"products\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": \"66889bd281b791087a41a177\",\r\n    \"products\": [\r\n        {\r\n            \"product\": \"6688944881b791087a41a134\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a new cart - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"    pm.response.json().hasOwnProperty(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": \"\",\r\n    \"products\": [\r\n        {\r\n            \"product\": \"\",\r\n            \"quantity\": -1\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting all cart things - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array of carts\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting a single cart - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the correct cart\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"user\");\r",
									"    pm.response.to.have.jsonBody(\"products\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/carts/66897f5ba349bb05449cfb14",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts",
								"66897f5ba349bb05449cfb14"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting a cart - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Cart has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"Cart has not been found\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/carts/66897f5ba349bb05447cfb14",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts",
								"66897f5ba349bb05447cfb14"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating cart - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated cart\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"products\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"product\": \"6688944881b791087a41a134\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/carts/668982b7a349bb05449cfb2b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts",
								"668982b7a349bb05449cfb2b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating cart - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"    pm.response.json().hasOwnProperty(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"product\": \"\", \r\n            \"quantity\": -2 \r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/carts/668982b7a349bb05449cfb2b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts",
								"668982b7a349bb05449cfb2b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a cart item - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'Cart deleted'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"Cart deleted\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/carts/6689c483ec809403425d8f2d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts",
								"6689c483ec809403425d8f2d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a cart item - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Cart has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.have.jsonBody({ message: \"Cart has not been found\" });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/carts/6689846aa349bb05448cfb35",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"carts",
								"6689846aa349bb05448cfb35"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Creating new comment - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created comment\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"product\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"user\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"rating\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"images\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": \"66887df6952b48f78fc2fa0e\",\r\n    \"user\": \"6688989481b791087a41a171\",\r\n    \"rating\": 4.5,\r\n    \"images\": [\"https://i5.walmartimages.com/asr/eb9aaf39-7462-44c9-bd86-274cfb1d38fb_1.1440eb2973046b94785da8e1d9c4108f.jpeg\"],\r\n    \"text\": \"Great jeans. Trying differnet types\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating new comment - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": \"\",\r\n    \"user\": \"\",\r\n    \"rating\": 6,\r\n    \"images\": [],\r\n    \"text\": \"shrt\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting all the comments - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array of comments\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting single comment - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the correct comment\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"product\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"user\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"rating\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"images\");\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/comments/66898874a349bb05449cfb3a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments",
								"66898874a349bb05449cfb3a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting single comment - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Comment has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Comment has not been found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/comments/66898874a349bb05569cfb3a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments",
								"66898874a349bb05569cfb3a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating the comment - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated comment\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"rating\", 3.5);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\", \"Not that bad actually\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\": 3.5,\r\n    \"text\": \"Not that bad actually\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/comments/66898a34a349bb05449cfb44",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments",
								"66898a34a349bb05449cfb44"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating the comment - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\": 6,\r\n    \"images\": [],\r\n    \"text\": \"shrt\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/comments/66898a34a349bb05449cfb44",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments",
								"66898a34a349bb05449cfb44"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting the comment - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'Comment is deleted'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Comment is deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/comments/6689c531ec809403425d8f37",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments",
								"6689c531ec809403425d8f37"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting the comment - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain 'Comment has not been found'\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Comment has not been found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/comments/66898be7a328bb05449cfb48",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comments",
								"66898be7a328bb05449cfb48"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OrderHistory",
			"item": [
				{
					"name": "Creating new order - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created order\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"    pm.expect(jsonData).to.have.property(\"products\");\r",
									"    pm.expect(jsonData.products).to.be.an(\"array\").with.lengthOf(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": \"6689b732ec809403425d8e89\",\r\n    \"products\": [\r\n        {\r\n            \"product\": \"6689b769ec809403425d8e8b\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating new order - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"product\": \"66899330d2bdd2ce14cae5cd\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting all the orders - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains array of orders\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting single order - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains order details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"    pm.expect(jsonData).to.have.property(\"products\");\r",
									"    pm.expect(jsonData.products).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/66898faaa349bb05449cfb4b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"66898faaa349bb05449cfb4b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting single user - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 404 when order is not found\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test for presence of error message in response body\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/6689b4faec809405425d8e6c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"6689b4faec809405425d8e6c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating order - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated order\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"    pm.expect(jsonData).to.have.property(\"products\");\r",
									"    pm.expect(jsonData.products).to.be.an(\"array\").with.lengthOf(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": \"66889e5e81b791087a41a181\",\r\n    \"products\": [\r\n        {\r\n            \"product\": \"6688a42d81b791087a41a198\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/6689b4faec809403425d8e6c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"6689b4faec809403425d8e6c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating order - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Order has not been found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": \"60d0fe4f5311236168a109ca\",\r\n    \"products\": [\r\n        {\r\n            \"product\": \"60d0fe4f5311236168a109cd\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/6689b4faec809403425d7e6c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"6689b4faec809403425d7e6c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting order - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains deletion confirmation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Order has been deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/6689c5acec809403425d8f3f",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"6689c5acec809403425d8f3f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting order - failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Order has not been found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/6689b77dec819403425d8e8d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"6689b77dec819403425d8e8d"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checking the server",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 and the server is running\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		}
	]
}